package com.google.firebase.samples.apps.mlkit.java;

import androidx.annotation.NonNull;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.FragmentActivity;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.drawable.Drawable;
import android.location.Location;
import android.os.Bundle;
import android.speech.tts.TextToSpeech;
import android.util.Log;
import android.view.View;
import android.widget.CompoundButton;
import android.widget.Toast;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdate;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapView;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptor;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.samples.apps.mlkit.R;
import com.google.firebase.samples.apps.mlkit.common.CameraSource;
import com.google.firebase.samples.apps.mlkit.common.CameraSourcePreview;
import com.google.firebase.samples.apps.mlkit.common.GraphicOverlay;
import com.google.firebase.samples.apps.mlkit.java.facedetection.FaceContourDetectorProcessor;
import com.mikepenz.materialdrawer.Drawer;
import com.mikepenz.materialdrawer.DrawerBuilder;
import com.mikepenz.materialdrawer.interfaces.OnCheckedChangeListener;
import com.mikepenz.materialdrawer.model.PrimaryDrawerItem;
import com.mikepenz.materialdrawer.model.SecondaryDrawerItem;
import com.mikepenz.materialdrawer.model.SecondarySwitchDrawerItem;
import com.mikepenz.materialdrawer.model.SwitchDrawerItem;
import com.mikepenz.materialdrawer.model.interfaces.IDrawerItem;
import com.mikepenz.materialdrawer.model.ToggleDrawerItem;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.w3c.dom.Text;

import java.io.IOException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;

import com.google.firebase.database.Exclude;
import com.google.firebase.database.IgnoreExtraProperties;

import java.util.HashMap;
import java.util.Map;



public class MapActivity extends FragmentActivity implements OnMapReadyCallback, GoogleMap.OnMyLocationButtonClickListener {
    private final String TAG = "MapActivity";

    private final int DEMO_ROUTE_PERIOD = 200;

    private GoogleMap mMap;
    private RequestQueue queue;
    private FusedLocationProviderClient fusedLocationClient;

    private boolean mReminders = true;
    private boolean mFeedback = true;

    private float mPrevBearing = 0;
    private String mDestination = null;

    private LatLng mCurrentLocation = null;
    private LatLng mLastLocation = null;

    private ArrayList<Marker> intersections = new ArrayList<>();
    private ArrayList<Marker> turns = new ArrayList<>();
    private Marker approaching = null;
    private Set<LatLng> passed = new HashSet();
    private boolean reachedIntersection = false;
    private double enterIntersectionTime = 0;

    private double[][] demoRoute = {{43.006162, -81.270554}, {43.00620539274308, -81.27053921449871}, {43.006248785486136, -81.27052442899742}, {43.00629217822921, -81.27050964349611}, {43.006335570972276, -81.27049485799482}, {43.00637896371535, -81.27048007249351}, {43.006422356458415, -81.27046528699223}, {43.00646574920148, -81.27045050149094}, {43.00650914194455, -81.27043571598963}, {43.00655253468762, -81.27042093048836}, {43.006595927430695, -81.27040614498705}, {43.00663932017376, -81.27039135948576}, {43.00668271291683, -81.27037657398446}, {43.006726105659894, -81.27036178848317}, {43.00676949840297, -81.27034700298186}, {43.00681289114603, -81.27033221748057}, {43.00685628388911, -81.27031743197928}, {43.00689967663217, -81.27030264647799}, {43.00694306937524, -81.2702878609767}, {43.006986462118306, -81.27027307547539}, {43.00702985486137, -81.2702582899741}, {43.00707324760445, -81.2702435044728}, {43.00711664034752, -81.27022871897151}, {43.007160033090585, -81.27021393347022}, {43.00720342583365, -81.27019914796892}, {43.007246818576725, -81.27018436246763}, {43.0072902113198, -81.27016957696634}, {43.007333604062865, -81.27015479146505}, {43.00737699680593, -81.27014000596375}, {43.007420389549, -81.27012522046245}, {43.00746378229207, -81.27011043496115}, {43.00750717503514, -81.27009564945986}, {43.00755056777821, -81.27008086395857}, {43.00759396052128, -81.27006607845726}, {43.00763735326434, -81.27005129295598}, {43.00768074600741, -81.27003650745468}, {43.00772413875048, -81.27002172195338}, {43.007767531493556, -81.27000693645209}, {43.00781092423662, -81.2699921509508}, {43.00785431697969, -81.26997736544949}, {43.007897709722755, -81.26996257994821}, {43.00794110246583, -81.2699477944469}, {43.007984495208895, -81.26993300894561}, {43.008008, -81.269925}, {43.00800148256601, -81.26987962308678}, {43.007994965132006, -81.26983424617355}, {43.00798844769802, -81.26978886926032}, {43.00798193026402, -81.26974349234712}, {43.00797541283003, -81.2696981154339}, {43.00796889539603, -81.26965273852065}, {43.007962377962045, -81.26960736160743}, {43.00795586052805, -81.2695619846942}, {43.007949343094054, -81.26951660778097}, {43.007942825660066, -81.26947123086777}, {43.00793630822607, -81.26942585395454}, {43.007929790792076, -81.26938047704132}, {43.00792327335809, -81.2693351001281}, {43.007916755924086, -81.26928972321487}, {43.0079102384901, -81.26924434630163}, {43.0079037210561, -81.26919896938841}, {43.00789720362211, -81.26915359247519}, {43.00789068618812, -81.26910821556197}, {43.007884168754124, -81.26906283864875}, {43.00787765132013, -81.26901746173553}, {43.007871133886134, -81.2689720848223}, {43.00786461645214, -81.26892670790907}, {43.00785809901815, -81.26888133099585}, {43.007851581584156, -81.26883595408263}, {43.00784506415016, -81.2687905771694}, {43.00783854671617, -81.26874520025618}, {43.00783202928218, -81.26869982334296}, {43.00782551184818, -81.26865444642974}, {43.00781899441419, -81.26860906951651}, {43.00781247698019, -81.2685636926033}, {43.007805959546204, -81.26851831569007}, {43.00779944211221, -81.26847293877684}, {43.00779292467821, -81.2684275618636}, {43.007786407244225, -81.26838218495038}, {43.00777988981023, -81.26833680803716}, {43.007773372376235, -81.26829143112394}, {43.00776685494225, -81.26824605421072}, {43.007760337508245, -81.2682006772975}, {43.00775382007426, -81.26815530038428}, {43.00774730264027, -81.26810992347104}, {43.007740785206266, -81.26806454655782}, {43.00773426777228, -81.26801916964459}, {43.00772775033828, -81.26797379273138}, {43.00772123290429, -81.26792841581815}, {43.0077147154703, -81.26788303890493}, {43.007708198036305, -81.2678376619917}, {43.00770168060231, -81.26779228507847}, {43.00769516316832, -81.26774690816525}, {43.00768864573432, -81.26770153125203}, {43.00768212830033, -81.26765615433881}, {43.007675610866336, -81.26761077742557}, {43.00766909343234, -81.26756540051235}, {43.00766257599835, -81.26752002359913}, {43.00765605856436, -81.26747464668591}, {43.00764954113036, -81.26742926977269}, {43.00764302369637, -81.26738389285946}, {43.00763650626237, -81.26733851594624}, {43.007629988828384, -81.26729313903301}, {43.00762347139439, -81.26724776211978}, {43.007616953960394, -81.26720238520656}, {43.0076104365264, -81.26715700829334}, {43.00760391909241, -81.26711163138012}, {43.007597401658415, -81.2670662544669}, {43.00759088422443, -81.26702087755368}, {43.007584366790425, -81.26697550064046}, {43.00757784935644, -81.26693012372724}, {43.00757133192244, -81.266884746814}, {43.007564814488454, -81.26683936990078}, {43.00755829705446, -81.26679399298756}, {43.007556, -81.266778}, {43.00756823604399, -81.2667338205882}, {43.00758047208798, -81.2666896411764}, {43.007592708131966, -81.2666454617646}, {43.00760494417595, -81.26660128235281}, {43.00761718021994, -81.266557102941}, {43.007629416263924, -81.26651292352919}, {43.00764165230791, -81.2664687441174}, {43.0076538883519, -81.26642456470559}, {43.00766612439589, -81.26638038529379}, {43.007678360439876, -81.26633620588198}, {43.00769059648386, -81.26629202647018}, {43.00770283252785, -81.2662478470584}, {43.00771506857184, -81.26620366764658}, {43.00772730461583, -81.26615948823478}, {43.00773954065982, -81.26611530882298}, {43.007751776703806, -81.26607112941119}, {43.007764012747785, -81.26602694999937}, {43.00777624879177, -81.26598277058758}, {43.007788484835764, -81.26593859117578}, {43.00780072087975, -81.26589441176397}, {43.007812956923736, -81.26585023235218}, {43.00782519296773, -81.26580605294038}, {43.007837429011715, -81.26576187352856}, {43.0078496650557, -81.26571769411677}, {43.00786190109969, -81.26567351470497}, {43.00787413714368, -81.26562933529316}, {43.00788637318767, -81.26558515588137}, {43.007898609231646, -81.26554097646957}, {43.00791084527563, -81.26549679705775}, {43.007923081319625, -81.26545261764596}, {43.00793531736361, -81.26540843823416}, {43.007947553407604, -81.26536425882236}, {43.00795978945159, -81.26532007941056}, {43.007972025495576, -81.26527589999876}, {43.00798426153956, -81.26523172058695}, {43.00799649758355, -81.26518754117515}, {43.00800873362754, -81.26514336176335}, {43.00802096967153, -81.26509918235155}, {43.00803320571551, -81.26505500293975}, {43.008045441759506, -81.26501082352794}, {43.00805767780349, -81.26496664411614}, {43.00806991384748, -81.26492246470434}, {43.008082149891464, -81.26487828529254}, {43.00809438593545, -81.26483410588074}, {43.008106621979444, -81.26478992646894}, {43.00811885802342, -81.26474574705713}, {43.00813109406741, -81.26470156764533}, {43.0081433301114, -81.26465738823353}, {43.008155566155395, -81.26461320882174}, {43.00816780219938, -81.26456902940993}, {43.00818003824337, -81.26452484999812}, {43.00819227428735, -81.26448067058632}, {43.00820451033134, -81.26443649117454}, {43.008216746375325, -81.26439231176272}, {43.00822898241931, -81.26434813235093}, {43.0082412184633, -81.26430395293912}, {43.00825345450729, -81.26425977352733}, {43.008265690551276, -81.26421559411551}, {43.00827792659526, -81.26417141470372}, {43.008290162639256, -81.26412723529191}, {43.00830239868324, -81.26408305588012}, {43.00831463472723, -81.2640388764683}, {43.008326870771214, -81.26399469705652}, {43.0083391068152, -81.2639505176447}, {43.008351342859186, -81.26390633823291}, {43.00836357890318, -81.2638621588211}, {43.008375814947165, -81.26381797940931}, {43.00838805099115, -81.2637737999975}, {43.00840028703514, -81.2637296205857}, {43.00841252307913, -81.2636854411739}, {43.008424759123116, -81.2636412617621}, {43.0084369951671, -81.26359708235029}, {43.00844923121109, -81.2635529029385}, {43.008461467255074, -81.2635087235267}, {43.00847370329907, -81.2634645441149}, {43.00848593934305, -81.2634203647031}, {43.00849817538704, -81.26337618529129}, {43.008510411431025, -81.26333200587949}, {43.00852264747502, -81.26328782646769}, {43.008534883519005, -81.26324364705589}, {43.00854711956299, -81.26319946764409}, {43.00855935560698, -81.26315528823228}, {43.00857159165096, -81.26311110882048}, {43.00858382769495, -81.26306692940868}, {43.00859606373894, -81.26302274999688}, {43.00860829978293, -81.26297857058508}, {43.008620535826914, -81.26293439117327}, {43.00863277187091, -81.26289021176147}, {43.00864500791489, -81.26284603234967}, {43.00865724395888, -81.26280185293787}, {43.008669480002865, -81.26275767352607}, {43.00868171604685, -81.26271349411427}, {43.00869395209084, -81.26266931470246}, {43.00870618813482, -81.26262513529068}, {43.00871842417881, -81.26258095587886}, {43.0087306602228, -81.26253677646706}, {43.00874289626679, -81.26249259705526}, {43.00875513231078, -81.26244841764347}, {43.00876736835477, -81.26240423823167}, {43.008779604398754, -81.26236005881987}, {43.00879184044274, -81.26231587940805}, {43.008804076486726, -81.26227169999625}, {43.00881631253071, -81.26222752058446}, {43.0088285485747, -81.26218334117266}, {43.008840784618684, -81.26213916176086}, {43.00885302066268, -81.26209498234905}, {43.00886525670667, -81.26205080293724}, {43.008877492750656, -81.26200662352544}, {43.00888972879464, -81.26196244411365}, {43.00890196483863, -81.26191826470185}, {43.008914200882614, -81.26187408529005}, {43.0089264369266, -81.26182990587824}, {43.00893867297059, -81.26178572646643}, {43.00895090901457, -81.26174154705464}, {43.008963145058566, -81.26169736764284}, {43.00897538110256, -81.26165318823104}, {43.008987617146545, -81.26160900881924}, {43.00899985319053, -81.26156482940743}, {43.00901208923452, -81.26152064999563}, {43.0090243252785, -81.26147647058383}, {43.00903656132249, -81.26143229117203}, {43.009048797366475, -81.26138811176023}, {43.00906103341046, -81.26134393234842}, {43.009066, -81.261326}, {43.00903464689639, -81.26129255565678}, {43.00900329379278, -81.26125911131354}, {43.00897194068918, -81.26122566697033}, {43.00894058758557, -81.26119222262709}, {43.008909234481955, -81.26115877828387}, {43.00887788137835, -81.26112533394065}, {43.00884652827475, -81.26109188959742}, {43.00881517517114, -81.26105844525419}, {43.00878382206753, -81.26102500091096}, {43.00875246896393, -81.26099155656775}, {43.00872111586031, -81.26095811222451}, {43.00868976275671, -81.2609246678813}, {43.008658409653094, -81.26089122353807}, {43.00862705654949, -81.26085777919484}, {43.00859570344589, -81.26082433485162}, {43.00856435034228, -81.26079089050839}, {43.008532997238675, -81.26075744616517}, {43.008501644135066, -81.26072400182194}, {43.00847029103146, -81.26069055747871}, {43.00843893792785, -81.2606571131355}, {43.00840758482424, -81.26062366879226}, {43.00837623172063, -81.26059022444905}, {43.008344878617024, -81.26055678010582}, {43.00831352551342, -81.26052333576258}, {43.008282172409814, -81.26048989141935}, {43.008250819306205, -81.26045644707614}, {43.008219466202604, -81.26042300273292}, {43.00818811309899, -81.26038955838968}, {43.00815675999539, -81.26035611404646}, {43.00812540689178, -81.26032266970324}, {43.00809405378817, -81.26028922536001}, {43.00806270068456, -81.26025578101678}, {43.00803134758095, -81.26022233667356}, {43.007999994477345, -81.26018889233033}, {43.007968641373736, -81.2601554479871}, {43.00793728827013, -81.26012200364389}, {43.00790593516653, -81.26008855930067}, {43.00787458206292, -81.26005511495742}, {43.00784322895931, -81.26002167061421}, {43.00781187585571, -81.25998822627099}, {43.0077805227521, -81.25995478192776}, {43.00774916964849, -81.25992133758453}, {43.00771781654488, -81.25988789324131}, {43.007686463441274, -81.25985444889808}, {43.007655110337666, -81.25982100455487}, {43.00762375723406, -81.25978756021163}, {43.00759240413045, -81.25975411586842}, {43.00756105102684, -81.25972067152517}, {43.00752969792323, -81.25968722718196}, {43.00749834481963, -81.25965378283873}, {43.00746699171602, -81.2596203384955}, {43.00743563861242, -81.25958689415228}, {43.00740428550881, -81.25955344980906}, {43.0073729324052, -81.25952000546584}, {43.007341579301595, -81.2594865611226}, {43.00731022619799, -81.25945311677938}, {43.00727887309438, -81.25941967243615}, {43.00724751999077, -81.25938622809292}, {43.00721616688717, -81.2593527837497}, {43.00718481378355, -81.25931933940647}, {43.007153460679945, -81.25928589506326}, {43.00712210757634, -81.25925245072003}, {43.007090754472735, -81.2592190063768}, {43.00705940136913, -81.25918556203358}, {43.007042, -81.259167}, {43.00700154427237, -81.2591454390329}, {43.00696108854474, -81.25912387806584}, {43.00692063281712, -81.25910231709875}, {43.006880177089485, -81.25908075613165}, {43.00683972136186, -81.25905919516458}, {43.006799265634235, -81.25903763419748}, {43.00675880990661, -81.2590160732304}, {43.00671835417898, -81.25899451226331}, {43.00667789845136, -81.25897295129623}, {43.00663744272372, -81.25895139032913}, {43.006596986996094, -81.25892982936205}, {43.006556531268465, -81.25890826839498}, {43.006516075540844, -81.25888670742788}, {43.006475619813216, -81.25886514646079}, {43.00643516408559, -81.25884358549372}, {43.00639470835796, -81.25882202452662}, {43.00635425263033, -81.25880046355952}, {43.0063137969027, -81.25877890259244}, {43.006273341175074, -81.25875734162535}, {43.006232885447446, -81.25873578065827}, {43.00619242971982, -81.25871421969119}, {43.00615197399219, -81.2586926587241}, {43.00611151826456, -81.25867109775702}, {43.00607106253694, -81.25864953678993}, {43.00603060680931, -81.25862797582283}, {43.005990151081676, -81.25860641485575}, {43.005949695354055, -81.25858485388866}, {43.005909239626426, -81.25856329292158}, {43.0058687838988, -81.2585417319545}, {43.00582832817117, -81.25852017098741}, {43.00578787244354, -81.25849861002033}, {43.00574741671592, -81.25847704905323}, {43.00570696098829, -81.25845548808616}, {43.00566650526066, -81.25843392711906}, {43.005626049533035, -81.25841236615197}, {43.00558559380541, -81.25839080518489}, {43.00554513807778, -81.2583692442178}, {43.00550468235015, -81.25834768325072}, {43.00546422662252, -81.25832612228363}, {43.00542377089489, -81.25830456131655}, {43.005383315167265, -81.25828300034945}, {43.00534285943964, -81.25826143938237}, {43.00530240371201, -81.25823987841528}, {43.00526194798438, -81.2582183174482}, {43.00522149225675, -81.25819675648111}, {43.00518103652913, -81.25817519551401}, {43.0051405808015, -81.25815363454694}, {43.00510012507388, -81.25813207357984}, {43.00505966934625, -81.25811051261277}, {43.00501921361862, -81.25808895164568}, {43.004978757890996, -81.25806739067859}, {43.00493830216337, -81.2580458297115}, {43.00489784643574, -81.25802426874442}, {43.00485739070811, -81.25800270777734}, {43.00481693498048, -81.25798114681024}, {43.004776479252854, -81.25795958584315}, {43.004736023525226, -81.25793802487607}, {43.0046955677976, -81.25791646390898}, {43.00465511206997, -81.2578949029419}, {43.00461465634234, -81.25787334197481}, {43.00457420061472, -81.25785178100773}, {43.00453374488709, -81.25783022004063}, {43.004493289159456, -81.25780865907356}, {43.004452833431834, -81.25778709810646}, {43.004412377704206, -81.25776553713938}, {43.00437192197657, -81.25774397617229}, {43.00433146624895, -81.25772241520521}, {43.00429101052132, -81.25770085423812}, {43.0042505547937, -81.25767929327104}, {43.004210099066064, -81.25765773230394}, {43.00416964333844, -81.25763617133687}, {43.004129187610815, -81.25761461036977}, {43.00408873188318, -81.25759304940269}, {43.00404827615556, -81.2575714884356}, {43.00400782042793, -81.2575499274685}, {43.0039673647003, -81.25752836650143}, {43.00392690897267, -81.25750680553433}, {43.003886453245045, -81.25748524456725}, {43.003845997517416, -81.25746368360016}, {43.00380554178979, -81.25744212263308}, {43.00376508606217, -81.257420561666}, {43.00372463033454, -81.25739900069891}, {43.003719, -81.257396}, {43.00372517332521, -81.25737392568561}, {43.00373134665042, -81.25735185137123}, {43.00373751997563, -81.25732977705682}, {43.003743693300834, -81.25730770274244}, {43.00374986662605, -81.25728562842805}, {43.00375603995126, -81.25726355411366}, {43.00376221327647, -81.25724147979928}, {43.00376838660168, -81.25721940548488}, {43.00377455992689, -81.25719733117049}, {43.0037807332521, -81.25717525685612}, {43.00378690657731, -81.25715318254173}, {43.00379307990252, -81.25713110822734}, {43.00379925322773, -81.25710903391295}, {43.003805426552944, -81.25708695959855}, {43.003811599878155, -81.25706488528417}, {43.003817773203366, -81.25704281096978}, {43.00382394652858, -81.25702073665539}, {43.00383011985379, -81.25699866234099}, {43.003836293179, -81.25697658802662}, {43.00384246650421, -81.25695451371222}, {43.003848639829414, -81.25693243939783}, {43.003854813154625, -81.25691036508343}, {43.00386098647984, -81.25688829076907}, {43.00386715980505, -81.25686621645467}, {43.00387333313026, -81.25684414214028}, {43.00387950645547, -81.2568220678259}, {43.00388567978068, -81.2567999935115}, {43.00389185310589, -81.2567779191971}, {43.003898026431095, -81.25675584488272}, {43.003904199756306, -81.25673377056833}, {43.003910373081524, -81.25671169625394}, {43.00391654640673, -81.25668962193956}, {43.003922719731946, -81.25666754762516}, {43.00392889305715, -81.25664547331077}, {43.00393506638236, -81.2566233989964}, {43.00394123970758, -81.25660132468201}, {43.00394741303278, -81.25657925036761}, {43.003953586357994, -81.25655717605322}, {43.00395975968321, -81.25653510173883}, {43.003965933008416, -81.25651302742445}, {43.00397210633363, -81.25649095311005}, {43.00397827965884, -81.25646887879567}, {43.00398445298405, -81.25644680448127}, {43.00399062630926, -81.25642473016688}, {43.003996799634464, -81.2564026558525}, {43.004002972959675, -81.25638058153811}, {43.004009146284886, -81.25635850722372}, {43.0040153196101, -81.25633643290934}, {43.00402149293531, -81.25631435859493}, {43.00402766626053, -81.25629228428056}, {43.00403383958573, -81.25627020996617}, {43.00404001291094, -81.25624813565177}, {43.00404618623615, -81.25622606133737}, {43.00405235956136, -81.256203987023}, {43.004058532886575, -81.25618191270861}, {43.004064706211786, -81.25615983839421}, {43.004070879537, -81.25613776407984}, {43.0040770528622, -81.25611568976544}, {43.00408322618742, -81.25609361545105}, {43.00408939951262, -81.25607154113666}, {43.00409557283784, -81.25604946682228}, {43.004101746163045, -81.25602739250789}, {43.004107919488256, -81.25600531819349}, {43.00411409281347, -81.2559832438791}, {43.004120266138685, -81.25596116956473}, {43.00412643946389, -81.25593909525033}, {43.00413261278909, -81.25591702093593}, {43.00413878611431, -81.25589494662155}, {43.00414495943952, -81.25587287230717}, {43.00415113276473, -81.25585079799278}, {43.00415730608994, -81.25582872367838}, {43.00416347941515, -81.25580664936399}, {43.004169652740366, -81.25578457504962}, {43.00417582606557, -81.25576250073522}, {43.00418199939078, -81.25574042642083}, {43.00418817271599, -81.25571835210644}, {43.00419434604121, -81.25569627779205}, {43.004200519366414, -81.25567420347767}, {43.004206692691625, -81.25565212916327}, {43.004212866016836, -81.25563005484888}, {43.00421903934205, -81.2556079805345}, {43.00422521266726, -81.2555859062201}, {43.00423138599246, -81.2555638319057}, {43.00423755931768, -81.25554175759133}, {43.00424373264289, -81.25551968327694}, {43.004249905968095, -81.25549760896256}, {43.004256079293306, -81.25547553464816}, {43.00426225261852, -81.25545346033377}, {43.004268425943735, -81.25543138601938}, {43.00427459926894, -81.255409311705}, {43.00428077259415, -81.25538723739061}, {43.00428694591936, -81.25536516307622}, {43.00429311924458, -81.25534308876183}, {43.00429929256978, -81.25532101444745}, {43.004305465894994, -81.25529894013304}, {43.004311639220205, -81.25527686581866}, {43.004317812545416, -81.25525479150429}, {43.00432398587063, -81.25523271718988}, {43.00433015919583, -81.25521064287548}, {43.00433633252105, -81.25518856856111}, {43.00434250584626, -81.25516649424671}, {43.00434867917147, -81.25514441993232}, {43.004354852496675, -81.25512234561793}, {43.00436102582189, -81.25510027130355}, {43.0043671991471, -81.25507819698916}, {43.004373372472315, -81.25505612267477}, {43.00437954579752, -81.25503404836039}, {43.00438571912272, -81.255011974046}, {43.00439189244794, -81.25498989973161}, {43.004398065773145, -81.25496782541722}, {43.00440423909836, -81.25494575110282}, {43.00441041242357, -81.25492367678844}, {43.004416585748785, -81.25490160247405}, {43.00442275907399, -81.25487952815966}, {43.00442893239921, -81.25485745384526}, {43.00443510572441, -81.25483537953087}, {43.00444127904963, -81.25481330521649}, {43.00444745237483, -81.2547912309021}, {43.004453625700044, -81.25476915658771}, {43.004459799025256, -81.25474708227333}, {43.00446597235047, -81.25472500795894}, {43.00447214567568, -81.25470293364455}, {43.00447831900088, -81.25468085933016}, {43.0044844923261, -81.25465878501578}, {43.00449066565131, -81.25463671070139}, {43.00449683897652, -81.254614636387}, {43.004503012301726, -81.2545925620726}, {43.004509185626944, -81.25457048775822}, {43.00451535895215, -81.25454841344383}, {43.00452153227736, -81.25452633912944}, {43.00452770560257, -81.25450426481504}, {43.00453387892779, -81.25448219050065}, {43.00454005225299, -81.25446011618627}, {43.0045462255782, -81.25443804187188}, {43.004552398903414, -81.25441596755749}, {43.004558572228625, -81.2543938932431}, {43.004564745553836, -81.25437181892872}, {43.00457091887904, -81.25434974461433}, {43.00457709220426, -81.25432767029994}, {43.00458326552946, -81.25430559598556}, {43.00458943885468, -81.25428352167116}, {43.004595612179884, -81.25426144735677}, {43.004601785505095, -81.25423937304238}, {43.004607958830306, -81.254217298728}, {43.00461413215552, -81.2541952244136}, {43.00462030548073, -81.25417315009922}, {43.00462647880594, -81.25415107578482}, {43.00463265213115, -81.25412900147043}, {43.00463882545636, -81.25410692715604}, {43.00464499878157, -81.25408485284166}, {43.00465117210678, -81.25406277852727}, {43.004657345431994, -81.25404070421288}, {43.004663518757205, -81.2540186298985}, {43.00466969208241, -81.25399655558411}, {43.00467586540762, -81.25397448126972}, {43.00468203873283, -81.25395240695534}, {43.00468821205804, -81.25393033264093}, {43.00469438538325, -81.25390825832655}, {43.004700558708464, -81.25388618401216}, {43.004706732033675, -81.25386410969777}, {43.004712905358886, -81.25384203538337}, {43.0047190786841, -81.253819961069}, {43.00472525200931, -81.2537978867546}, {43.00473142533452, -81.25377581244021}, {43.00473759865973, -81.25375373812582}, {43.004743771984934, -81.25373166381144}, {43.00474994531015, -81.25370958949705}, {43.00475611863536, -81.25368751518266}, {43.00476229196057, -81.25366544086828}, {43.00476846528578, -81.25364336655389}, {43.00477463861099, -81.25362129223949}, {43.0047808119362, -81.25359921792511}, {43.00478698526142, -81.25357714361071}, {43.00479315858662, -81.25355506929633}, {43.00479933191183, -81.25353299498194}, {43.004805505237044, -81.25351092066755}, {43.004811678562255, -81.25348884635316}, {43.004817851887466, -81.25346677203878}, {43.00482402521267, -81.25344469772438}, {43.00483019853788, -81.25342262340999}, {43.00483637186309, -81.2534005490956}, {43.00484254518831, -81.25337847478121}, {43.00484871851352, -81.25335640046683}, {43.004854891838725, -81.25333432615243}, {43.00486106516394, -81.25331225183804}, {43.00486723848915, -81.25329017752367}, {43.00487341181436, -81.25326810320927}, {43.00487958513956, -81.25324602889488}, {43.00488575846478, -81.25322395458048}, {43.00489193178999, -81.2532018802661}, {43.0048981051152, -81.25317980595172}, {43.004904278440414, -81.25315773163732}, {43.00491045176562, -81.25313565732293}, {43.00491662509083, -81.25311358300856}, {43.00492279841604, -81.25309150869415}, {43.00492897174125, -81.25306943437977}, {43.00493514506647, -81.25304736006537}, {43.00494131839167, -81.253025285751}, {43.004947491716884, -81.2530032114366}, {43.004953665042095, -81.2529811371222}, {43.004959838367306, -81.25295906280782}, {43.00496601169252, -81.25293698849345}, {43.00497218501772, -81.25291491417904}, {43.00497835834294, -81.25289283986466}, {43.00498453166815, -81.25287076555026}, {43.00499070499336, -81.25284869123588}, {43.004996878318565, -81.2528266169215}, {43.005003051643776, -81.2528045426071}, {43.00500922496899, -81.25278246829271}, {43.0050153982942, -81.25276039397832}, {43.005021571619416, -81.25273831966393}, {43.00502774494462, -81.25271624534955}, {43.00503391826983, -81.25269417103515}, {43.00504009159504, -81.25267209672077}, {43.00504626492025, -81.25265002240639}, {43.005052438245464, -81.25262794809198}, {43.00505861157067, -81.2526058737776}, {43.005064784895886, -81.25258379946321}, {43.0050709582211, -81.25256172514882}, {43.00507713154631, -81.25253965083444}, {43.00508330487152, -81.25251757652003}, {43.00508947819672, -81.25249550220566}, {43.005095651521934, -81.25247342789127}, {43.005101824847145, -81.25245135357687}, {43.005105, -81.25244}, {43.00508482126462, -81.25242912783655}, {43.005064642529234, -81.25241825567308}, {43.00504446379386, -81.25240738350962}, {43.005024285058475, -81.25239651134616}, {43.0050041063231, -81.2523856391827}, {43.004983927587716, -81.25237476701925}, {43.00496374885233, -81.25236389485579}, {43.00494357011695, -81.25235302269232}, {43.004923391381574, -81.25234215052886}, {43.004903212646184, -81.2523312783654}, {43.00488303391081, -81.25232040620193}, {43.004873, -81.252315}};

    private int demoRouteIndex = 0;
    private Timer demoRouteTimer;
    private double lastLeftSignal = 0;
    private double lastRightSignal = 0;

    private Marker[] demoRouteMarkers;

    public static FaceContourDetectorProcessor faceProcessor;
    public static CameraSource cameraSource = null;
    private static final String FACE_CONTOUR = "Face Contour";
    private CameraSourcePreview preview;
    private GraphicOverlay graphicOverlay;

    private MapView mapView;

    private Drawer mDrawer;
    private boolean mDataPointsVisible = false;

    TextToSpeech tts;

    // [START post_class]
    @IgnoreExtraProperties
    private class Signal {

        public String uid;
        public String coreid;
        public String data;
        public String event;
        public Date published_at;

        public Signal() {
            // Default constructor required for calls to DataSnapshot.getValue(Post.class)
        }

        public Signal(String uid, String coreid, String event, Date published_at) {
            this.uid = uid;
            this.coreid = coreid;
            this.data = data;
            this.event = event;
            this.published_at = published_at;
        }

        // [START post_to_map]
        @Exclude
        public Map<String, Object> toMap() {
            HashMap<String, Object> result = new HashMap<>();
            result.put("uid", uid);
            result.put("coreid", coreid);
            result.put("data", data);
            result.put("event", event);
            result.put("published_at", published_at);
            return result;
        }
        // [END post_to_map]

    }
// [END post_class]

    private enum drawerIDs {
        TITLE,
        REMINDER_TOGGLE,
        FEEDBACK_TOGGLE,
        DEMO,
        CAMERA_VIEW,
        DATA_POINTS,
        START_DEMO_ROUTE
    }


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_map);

//        mapView = findViewById(R.id.map);
//        FragmentManager fm = getFragmentManager();
//        fm.beginTransaction()
//                .setCustomAnimations(android.R.animator.fade_in, android.R.animator.fade_out)
//                .show(somefrag)
//                .commit();
//        mapView.setVisibility(View.INVISIBLE);

        //if you want to update the items at a later time it is recommended to keep it in a variable
        PrimaryDrawerItem title = new PrimaryDrawerItem().withIdentifier(drawerIDs.TITLE.ordinal()).withName("DriverSyde");
        SecondarySwitchDrawerItem reminderToggle = new SecondarySwitchDrawerItem().withIdentifier(drawerIDs.REMINDER_TOGGLE.ordinal()).withName("Proactive reminders").withChecked(mReminders);
        SecondarySwitchDrawerItem feedbackToggle = new SecondarySwitchDrawerItem().withIdentifier(drawerIDs.FEEDBACK_TOGGLE.ordinal()).withName("Immediate feedback").withChecked(mFeedback);
        PrimaryDrawerItem demoHeading = new PrimaryDrawerItem().withIdentifier(drawerIDs.DEMO.ordinal()).withName("Demo");
        SecondaryDrawerItem cameraView = new SecondaryDrawerItem().withIdentifier(drawerIDs.CAMERA_VIEW.ordinal()).withName("Camera view");
        SecondaryDrawerItem dataPoints = new SecondaryDrawerItem().withIdentifier(drawerIDs.DATA_POINTS.ordinal()).withName("Toggle data points");
        SecondaryDrawerItem startDemoRoute = new SecondaryDrawerItem().withIdentifier(drawerIDs.START_DEMO_ROUTE.ordinal()).withName("Start demo route");



        //create the drawer and remember the `Drawer` result object
        mDrawer = new DrawerBuilder()
                .withActivity(this)
                .withActionBarDrawerToggle(true)
                .withActionBarDrawerToggleAnimated(true)
                .withCloseOnClick(true)
                .withSelectedItem(-1)
                .addDrawerItems(
                        title,
                        reminderToggle,
                        feedbackToggle,
                        demoHeading,
                        cameraView,
                        dataPoints,
                        startDemoRoute
                )
                .withOnDrawerItemClickListener(new Drawer.OnDrawerItemClickListener() {
                    @Override
                    public boolean onItemClick(View view, int position, IDrawerItem drawerItem) {
                        switch (drawerIDs.values()[(int) drawerItem.getIdentifier()]) {
                            case CAMERA_VIEW:
                                if (preview.getVisibility() == View.INVISIBLE) {
                                    preview.setVisibility(View.VISIBLE);
                                    graphicOverlay.setVisibility(View.VISIBLE);
                                } else {
                                    preview.setVisibility(View.INVISIBLE);
                                    graphicOverlay.setVisibility(View.INVISIBLE);
                                }
//                                Intent intent = new Intent(getBaseContext(), LivePreviewActivity.class);
//                                view.getContext().startActivity(intent);
                                mDrawer.closeDrawer();
                                break;
                            case DATA_POINTS:
                                mDataPointsVisible = !mDataPointsVisible;
                                for (Marker m : intersections) {
                                    m.setVisible(mDataPointsVisible);
                                }
                                for (Marker m : turns) {
                                    m.setVisible(mDataPointsVisible);
                                }
                                mDrawer.closeDrawer();
                                break;
                            case START_DEMO_ROUTE:
                                setDestination("Ryerson Public School");
                                runDemoRoute();
                                mDrawer.closeDrawer();
                                break;
                        }
                        return true;
                    }

                })
                .build();

        reminderToggle.withOnCheckedChangeListener(new OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(IDrawerItem drawerItem, CompoundButton buttonView, boolean isChecked) {
                mReminders = isChecked;
            }
        });
        feedbackToggle.withOnCheckedChangeListener(new OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(IDrawerItem drawerItem, CompoundButton buttonView, boolean isChecked) {
                mFeedback = isChecked;
            }
        });


        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);

        // Instantiate the RequestQueue.
        queue = Volley.newRequestQueue(this);

        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this);

        demoRouteTimer = new Timer();

        tts = new TextToSpeech(getApplicationContext(), new TextToSpeech.OnInitListener() {
            @Override
            public void onInit(int status) {
                if(status != TextToSpeech.ERROR) {
                    tts.setLanguage(Locale.US);
                }
            }
        });
        faceProcessor = new FaceContourDetectorProcessor(tts);

        preview = findViewById(R.id.firePreview);
        if (preview == null) {
            Log.d(TAG, "Preview is null");
        }
        preview.setVisibility(View.INVISIBLE);
        graphicOverlay = findViewById(R.id.fireFaceOverlay);

        Log.d(TAG, "this is it overlay: " + graphicOverlay);
        if (graphicOverlay == null) {
            Log.d(TAG, "graphicOverlay is null");
        }
        graphicOverlay.setVisibility(View.INVISIBLE);


        createCameraSource("Face Contour");
        cameraSource.setFacing(CameraSource.CAMERA_FACING_FRONT);
        startCameraSource();

        final FirebaseDatabase database = FirebaseDatabase.getInstance("https://virtual-driving-instruct-91a0b.firebaseio.com/");
        Log.i(TAG, "firebasedatabase:" + database);
//        database.getReference().addValueEventListener(new ValueEventListener() {
//            @Override
//            public void onDataChange(DataSnapshot dataSnapshot) {
//                // Get object and use the values to update the UI
//                String value = dataSnapshot.getValue(String.class);
//                // Do something with the data
//                Log.w(TAG, "NEWVAL" + value);
//            }
//
//            @Override
//            public void onCancelled(DatabaseError databaseError) {
//            }
//        });
        DatabaseReference ref = database.getReference().child("signal");

        ref.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                // This method is called once with the initial value and again
                // whenever data at this location is updated.
//                Signal value = dataSnapshot.getValue(Signal.class);
//                Log.d(TAG, "Value is: " + value);
                if (dataSnapshot.getValue() != null) {
                    String res = dataSnapshot.getValue().toString();
                    Log.d(TAG, "Value is: " + dataSnapshot.getValue().toString());
                    database.getReference().removeValue();
                    if (res.contains("left")) {
                        lastLeftSignal = System.currentTimeMillis()/1000;
                        if (!reachedIntersection) {
                            tts.speak("Make sure to check your left blind spot", TextToSpeech.QUEUE_ADD, null);
                            new android.os.Handler().postDelayed(
                                    new Runnable() {
                                        public void run() {
                                            Log.i("tag","LEFT TURN TIMEOUT");
                                            if (faceProcessor.getLastLeft() > 3) {
                                                tts.speak("You did not scan left", TextToSpeech.QUEUE_ADD, null);
                                            } else {
                                                tts.speak("Good job", TextToSpeech.QUEUE_ADD, null);
                                            }
                                        }
                                    }, 3000);
                        }
                    } else {
                        lastRightSignal = System.currentTimeMillis()/1000;
                        if (!reachedIntersection) {
                            tts.speak("Make sure to check your right blind spot", TextToSpeech.QUEUE_ADD, null);
                            new android.os.Handler().postDelayed(
                                    new Runnable() {
                                        public void run() {
                                            Log.i("tag","RIGHT TURN TIMEOUT");
                                            if (faceProcessor.getLastRight() > 3) {
                                                tts.speak("You did not scan right", TextToSpeech.QUEUE_ADD, null);
                                            } else {
                                                tts.speak("Good job", TextToSpeech.QUEUE_ADD, null);
                                            }
                                        }
                                    }, 3000);
                        }

                    }
                }

                //                Log.d(TAG, "val: " + dataSnapshot.child("signal"));
//                for (DataSnapshot messageSnapshot: dataSnapshot.getValue().getChildren()) {
//                    String name = (String) messageSnapshot.child("name").getValue();
//                    String message = (String) messageSnapshot.child("message").getValue();
//                    Log.d(TAG, "name mess" + name + " " + message);
//                }
            }

            @Override
            public void onCancelled(DatabaseError error) {
                // Failed to read value
                Log.w(TAG, "Failed to read value.", error.toException());
            }
        });

    }

    private void startCameraSource() {
        if (cameraSource != null) {
            try {
                if (preview == null) {
                    Log.d(TAG, "resume: Preview is null");
                }
                if (graphicOverlay == null) {
                    Log.d(TAG, "resume: graphOverlay is null");
                }
                preview.start(cameraSource, graphicOverlay);
            } catch (IOException e) {
                Log.e(TAG, "Unable to start camera source.", e);
                cameraSource.release();
                cameraSource = null;
            }
        }
    }

    private void createCameraSource(String model) {
        // If there's no existing cameraSource, create one.
        if (cameraSource == null) {
            cameraSource = new CameraSource(this, graphicOverlay);
        }

        try {
            switch (model) {
                case FACE_CONTOUR:
                    Log.i(TAG, "Using Face Contour Detector Processor");
                    cameraSource.setMachineLearningFrameProcessor(faceProcessor);
                    break;
                default:
                    Log.e(TAG, "Unknown model: " + model);
            }
        } catch (Exception e) {
            Log.e(TAG, "Can not create image processor: " + model, e);
            Toast.makeText(
                    getApplicationContext(),
                    "Can not create image processor: " + e.getMessage(),
                    Toast.LENGTH_LONG)
                    .show();
        }
    }

    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;

        // TODO: Before enabling the My Location layer, you must request
        // location permission from the user. This sample does not include
        // a request for location permission.
        mMap.setMyLocationEnabled(true);
        mMap.setOnMyLocationButtonClickListener(this);


        String url = "https://maps.london.ca/arcgisa/rest/services/OpenData/OpenData_Transportation/MapServer/16/query?where=1%3D1&outFields=*&outSR=4326&f=json";
        StringRequest stringRequest = new StringRequest(Request.Method.GET, url,
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        try {
                            JSONObject json = new JSONObject(response);
                            JSONArray features = json.getJSONArray("features");
                            for (int i = 0; i < features.length(); i++) {
                                JSONObject f = features.getJSONObject(i);
                                String type = f.getJSONObject("attributes").getString("IntersectionType");
                                JSONObject geometry = f.getJSONObject("geometry");

                                LatLng pos = new LatLng(geometry.getDouble("y"), geometry.getDouble("x"));
                                if (!((pos.latitude == 43.00476696908109 && pos.longitude == -81.25795717969847))) {
                                       // || (pos.latitude == 43.00907802382399 && pos.longitude == -81.26129407898745))) {
                                    float hue = (type.equals("Signalized Intersection")) ?
                                            BitmapDescriptorFactory.HUE_GREEN :
                                            BitmapDescriptorFactory.HUE_ORANGE;
                                    Marker m = mMap.addMarker(new MarkerOptions()
                                            .position(pos).title(type)
                                            .icon(BitmapDescriptorFactory.defaultMarker(hue)));
                                    m.setVisible(mDataPointsVisible);
                                    intersections.add(m);
                                }
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                }, new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError e) {
                        e.printStackTrace();
                    }
                });
        stringRequest.setRetryPolicy(new DefaultRetryPolicy(5000,
                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
        queue.add(stringRequest);
    }

    @Override
    public void onResume() {
        super.onResume();
        fusedLocationClient.getLastLocation()
                .addOnSuccessListener(this, new OnSuccessListener<Location>() {
                    @Override
                    public void onSuccess(Location location) {
                        if (location != null) {
                            mLastLocation = mCurrentLocation;
                            mCurrentLocation = new LatLng(location.getLatitude(), location.getLongitude());
                            mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(
                                    mCurrentLocation, 15));

                            onLocationUpdated();
                        }
                    }
                })
                .addOnFailureListener(this, new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        Log.e(TAG, "Failed to get location: ", e);
                    }
                });
    }

    @Override
    public boolean onMyLocationButtonClick() {
        // Return false so that we don't consume the event and the default behavior still occurs
        // (the camera animates to the user's current position).
        return false;
    }

    public void toastAndSpeak(int rId) {
        Toast.makeText(this, rId, Toast.LENGTH_SHORT).show();
        tts.speak(getString(rId), TextToSpeech.QUEUE_ADD, null);
    }

    private double getLastLeftSignal() {
        return (double) System.currentTimeMillis()/1000 - lastLeftSignal;
    }
    private double getLastRightSignal() {
        return (double) System.currentTimeMillis()/1000 - lastRightSignal;
    }

    public void onLocationUpdated() {
        double minDistance = 80; // Threshold
        Marker nearest = null;
        for (Marker intersection : intersections) {
            double dist = distance(mCurrentLocation, intersection.getPosition());
            if (dist < minDistance) {
                minDistance = dist;
                nearest = intersection;
            }
        }

        if (nearest != null) {
            if (approaching != nearest && !passed.contains(nearest.getPosition())) {
                approaching = nearest;

                reachedIntersection = false;
                Log.d(TAG, "REACHED INTERSEC " + nearest.getPosition());

                if (mReminders) {
                    boolean isSignaled = approaching.getTitle().equals("Signalized Intersection");
                    if (mDestination == null) {
                        if (isSignaled)  toastAndSpeak(R.string.reminder_intersection_signaled_free);
                        else  toastAndSpeak(R.string.reminder_intersection_unsignaled_free);
                    } else {
                        Marker turn = getMatchingTurn(approaching.getPosition());
                        Log.i(TAG, "getMatchingTurn: " + turn);
                        if (turn != null) {
                            if (turn.getTitle().equals("turn-left")) {
                                if (isSignaled)  toastAndSpeak(R.string.reminder_intersection_signaled_left);
                                else  toastAndSpeak(R.string.reminder_intersection_unsignaled_left);
//                                tts.speak("Make sure to check your left blind spot", TextToSpeech.QUEUE_ADD, null);
                                new android.os.Handler().postDelayed(
                                        new Runnable() {
                                            public void run() {
                                                Log.i("tag","LEFT TURN TIMEOUT");
                                                if (getLastLeftSignal() > 3) {
                                                    tts.speak("You did not signal left for this turn", TextToSpeech.QUEUE_ADD, null);
                                                } else {
                                                    tts.speak("Good job signalling left", TextToSpeech.QUEUE_ADD, null);
                                                }
                                            }
                                        }, 3000);
                            }
                            else if (turn.getTitle().equals("turn-right")) {
                                if (isSignaled)  toastAndSpeak(R.string.reminder_intersection_signaled_right);
                                else  toastAndSpeak(R.string.reminder_intersection_unsignaled_right);
//                                tts.speak("Make sure to check your right blind spot", TextToSpeech.QUEUE_ADD, null);
                                new android.os.Handler().postDelayed(
                                        new Runnable() {
                                            public void run() {
                                                Log.i("tag","RIGHT TURN TIMEOUT");
                                                if (getLastRightSignal() > 3) {
                                                    tts.speak("You did not signal right for this turn", TextToSpeech.QUEUE_ADD, null);
                                                } else {
                                                    tts.speak("Good job signalling right", TextToSpeech.QUEUE_ADD, null);
                                                }
                                            }
                                        }, 3000);
                            }
                            else {
                                // Unknown type of turn; treat as free
                                if (isSignaled)  toastAndSpeak(R.string.reminder_intersection_signaled_free);
                                else  toastAndSpeak(R.string.reminder_intersection_unsignaled_free);
                            }
                        } else {
                            Log.e(TAG, "getMatchingTurn returned null");
                            if (isSignaled)  toastAndSpeak(R.string.reminder_intersection_signaled_straight);
                            else  toastAndSpeak(R.string.reminder_intersection_unsignaled_straight);
                        }
                    }
                    enterIntersectionTime = (double) System.currentTimeMillis()/1000;
                }
            }

            if (minDistance < 10) {
                reachedIntersection = true;
            }
            else if (reachedIntersection && minDistance > 20 && !passed.contains(nearest.getPosition())) {
                passed.add(nearest.getPosition());
                if (mFeedback) { //TODO: This will be toggleFeedback
                    double leftDiff = (double) System.currentTimeMillis()/1000 - enterIntersectionTime;
                    double rightDiff = (double) System.currentTimeMillis()/1000 - enterIntersectionTime;
//                    Toast.makeText(
//                            getApplicationContext(),
//                            "ld rd ll lr" + leftDiff + " " + rightDiff + " " + faceProcessor.getLastLeft() + " " + faceProcessor.getLastRight() + ";;;;",
//                            Toast.LENGTH_LONG)
//                            .show();
                    Log.d(TAG, "ld rd ll lr" + leftDiff + " " + rightDiff + " " + faceProcessor.getLastLeft() + " " + faceProcessor.getLastRight() + ";;;;");
                    if (leftDiff < faceProcessor.getLastLeft() && rightDiff < faceProcessor.getLastRight()) {
                        tts.speak(getString(R.string.feedback_bad_both_scan), TextToSpeech.QUEUE_ADD, null);
                    } else if (leftDiff < faceProcessor.getLastLeft()) {
                        tts.speak(getString(R.string.feedback_bad_left_scan), TextToSpeech.QUEUE_ADD, null);
                    } else if (rightDiff < faceProcessor.getLastRight()) {
                        tts.speak(getString(R.string.feedback_bad_right_scan), TextToSpeech.QUEUE_ADD, null);;
                    } else {
                        tts.speak(getString(R.string.feedback_good_intersection), TextToSpeech.QUEUE_ADD, null);
                    }
                    reachedIntersection = false;
                }
            }
        }
    }

    public double distance(LatLng a, LatLng b) {
        double xDist = (a.latitude - b.latitude) * 111111.1;
        double yDist = (a.longitude - b.longitude) * 111111.1 * Math.cos((a.latitude + b.latitude) / 2.0);

        return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));
    }

    public Marker getMatchingTurn(LatLng loc) {
        for (Marker turn : turns) {
            if (distance(loc, turn.getPosition()) < 10) {
                return turn;
            }
        }
        return null;
    }

    public void setDestination(String destination) {
        mDestination = destination;

        String url = String.format(Locale.US,
                "https://maps.googleapis.com/maps/api/directions/json?origin=%.6f,%.6f&destination=%s&waypoints=via:43.007653,-81.267600&key=%s&mode=driving&avoid=tolls|highways|ferries&region=ca",
                mCurrentLocation.latitude,
                mCurrentLocation.longitude,
                URLEncoder.encode(destination),
                getString(R.string.google_maps_key));

        StringRequest stringRequest = new StringRequest(Request.Method.GET, url,
                new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        try {
                            Log.i(TAG, "ROUTE RESPONSE:");
                            Log.i(TAG, response);

                            JSONObject route = new JSONObject(response)
                                    .getJSONArray("routes")
                                    .getJSONObject(0);

                            JSONObject neCorner = route.getJSONObject("bounds").getJSONObject("northeast");
                            JSONObject swCorner = route.getJSONObject("bounds").getJSONObject("southwest");

                            LatLngBounds bounds = new LatLngBounds(
                                    new LatLng(swCorner.getDouble("lat"), swCorner.getDouble("lng")),
                                    new LatLng(neCorner.getDouble("lat"), neCorner.getDouble("lng")));

                                    mMap.moveCamera(CameraUpdateFactory.newLatLngBounds(bounds, 0));

                            JSONArray steps = route
                                    .getJSONArray("legs")
                                    .getJSONObject(0)
                                    .getJSONArray("steps");

                            for (int i = 0; i < steps.length(); i++) {
                                JSONObject step = steps.getJSONObject(i);
                                String maneuver = step.optString("maneuver", "no-maneuver");

                                JSONObject location = step.getJSONObject("start_location");
                                LatLng pos = new LatLng(location.getDouble("lat"), location.getDouble("lng"));

                                Marker m = mMap.addMarker(new MarkerOptions()
                                        .position(pos).title(maneuver)
                                        .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_AZURE)));
                                m.setVisible(mDataPointsVisible);
                                turns.add(m);
                            }
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError e) {
                e.printStackTrace();
            }
        });
        stringRequest.setRetryPolicy(new DefaultRetryPolicy(5000,
                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
        queue.add(stringRequest);

    }

    private BitmapDescriptor bitmapDescriptorFromVector(Context context, int vectorResId) {
        Drawable vectorDrawable = ContextCompat.getDrawable(context, vectorResId);
        vectorDrawable.setBounds(0, 0, vectorDrawable.getIntrinsicWidth(), vectorDrawable.getIntrinsicHeight());
        Bitmap bitmap = Bitmap.createBitmap(vectorDrawable.getIntrinsicWidth(), vectorDrawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bitmap);
        vectorDrawable.draw(canvas);
        return BitmapDescriptorFactory.fromBitmap(bitmap);
    }

    public float getBearing(LatLng from, LatLng to) {
        if (from == null) return mPrevBearing;
        mPrevBearing = (float) Math.toDegrees(Math.atan2(to.longitude - from.longitude, to.latitude - from.latitude));
        return mPrevBearing;
    }

    public void runDemoRoute() {
        demoRouteMarkers = new Marker[demoRoute.length];
        for (int i = 0; i < demoRoute.length; i++) {
            double[] xy = demoRoute[i];
            LatLng pos = new LatLng(xy[0], xy[1]);
            Marker m = mMap.addMarker(new MarkerOptions()
                    .position(pos)
                    .icon(bitmapDescriptorFromVector(this, R.drawable.route_dot_24dp))
                    .flat(true));
            demoRouteMarkers[i] = m;

            if (i == demoRoute.length - 1) {
                mMap.addMarker(new MarkerOptions().position(pos));

            }
        }

        demoRouteTimer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run(){
                final int lastIndex = demoRouteIndex;
                double[] xy = demoRoute[demoRouteIndex++];
                mLastLocation = mCurrentLocation;
                mCurrentLocation = new LatLng(xy[0], xy[1]);

                if (demoRouteIndex >= demoRoute.length) {
                    demoRouteIndex = 0;
                    demoRouteTimer.cancel();
                }

                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        demoRouteMarkers[lastIndex].remove();
                        onLocationUpdated();

                        mMap.animateCamera(CameraUpdateFactory.newCameraPosition(CameraPosition.builder()
                                .target(mCurrentLocation)
                                .bearing(getBearing(mLastLocation, mCurrentLocation))
                                .tilt(45)
                                .zoom(18)
                                .build()), DEMO_ROUTE_PERIOD*3, null);

                    }
                });
            }
        },0,DEMO_ROUTE_PERIOD);
    }

}
